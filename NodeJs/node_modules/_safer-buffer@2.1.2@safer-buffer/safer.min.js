"use strict";var buffer=require("buffer");var Buffer=buffer.Buffer;var safer={};var key;for(key in buffer){if(!buffer.hasOwnProperty(key)){continue}if(key==="SlowBuffer"||key==="Buffer"){continue}safer[key]=buffer[key]}var Safer=safer.Buffer={};for(key in Buffer){if(!Buffer.hasOwnProperty(key)){continue}if(key==="allocUnsafe"||key==="allocUnsafeSlow"){continue}Safer[key]=Buffer[key]}safer.Buffer.prototype=Buffer.prototype;if(!Safer.from||Safer.from===Uint8Array.from){Safer.from=function(c,a,b){if(typeof c==="number"){throw new TypeError('The "value" argument must not be of type number. Received type '+typeof c)}if(c&&typeof c.length==="undefined"){throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof c)}return Buffer(c,a,b)}}if(!Safer.alloc){Safer.alloc=function(b,d,c){if(typeof b!=="number"){throw new TypeError('The "size" argument must be of type number. Received type '+typeof b)}if(b<0||b>=2*(1<<30)){throw new RangeError('The value "'+b+'" is invalid for option "size"')}var a=Buffer(b);if(!d||d.length===0){a.fill(0)}else{if(typeof c==="string"){a.fill(d,c)}else{a.fill(d)}}return a}}if(!safer.kStringMaxLength){try{safer.kStringMaxLength=process.binding("buffer").kStringMaxLength}catch(e){}}if(!safer.constants){safer.constants={MAX_LENGTH:safer.kMaxLength};if(safer.kStringMaxLength){safer.constants.MAX_STRING_LENGTH=safer.kStringMaxLength}}module.exports=safer;