//如果是数组，表示将index.js和index1.js一起打包在index.html文件中
		//entry: ['./src/index.js','./src/index1.js'],

		//分别将a.js b.js打包到对应的a.html b.html文件中，就需要创建一个对象
	// 	entry:{
	// 		a:'./src/a.js',
	// 		b:'./src/b.js',
	// 	}

查看src/images文件夹下面的文件内存情况
ls -lh src/images
ls -lh dist/images



	如何调试webpack.config.js文件
	如何在index.js中引入public.js文件并使用
	打包分离文件时，如何分别对应到指定的目录中

	模块：ES6 commonJS AMD CMD

	hash与chunkhash的区别
	  output: {
        path: path.resolve(__dirname, 'dist'),
        filename: '[name].[chunkhash].js'
    },
		filename: '[name].[hash:8].js',
		//filename: '[name].[chunkhash].js'




//热替换
// if (module.hot) {
// 	module.hot.accept();
// }

 //path.resolve是nodeJs里面方法，可以连接两个相对路径并生成绝对路径；

 /*
使用说明
详细文档使用：https://webpack.docschina.org/concepts/
1.模式：
通过将 mode 参数设置为 development(开发环境), production(生产环境) 或 none，可以启用对应环境下 webpack 内置的优化。
默认值为 production。

2.webpack兼容性：
webpack 支持所有 ES5 兼容（IE8 及以下不提供支持）的浏览器。
webpack 的 import() 和 require.ensure() 需要环境中有 Promise。
如果你想要支持旧版本浏览器，你应该在使用这些 webpack 提供的表达式之前，先加载一个 polyfill。


3.入口起点(entry point)：
指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始，webpack 会找出有哪些模块和 library 是入口起点（直接和间接）依赖的。
默认值是 ./src/index.js，然而，可以通过在 webpack 配置中配置 entry 属性，来指定一个不同的入口起点（或者也可以指定多个入口起点)
详细学习：https://webpack.docschina.org/concepts/entry-points/

4.出口(output)

5.loader
为开箱即用的自带特性，webpack 自身只支持 JavaScript。
而 loader 能够让 webpack 处理那些非 JavaScript 文件，并且先将它们转换为有效 模块，然后添加到依赖图中，这样就可以提供给应用程序使用。
loader 能够 import 导入任何类型的模块（例如 .css 文件）
在更高层面，在 webpack 的配置中 loader 有两个特征：
test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。
use 属性，表示进行转换时，应该使用哪个 loader。

6.插件(plugins)
loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务，
插件的范围包括：打包优化、资源管理和注入环境变量。
想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中


* */



ES6
Ugliyfyjs  JS压缩
