@charset "utf-8";
@charset "utf-8";
//////////////////////////////////////////////////////////////////////////////////////////////////////
//1. 变量的使用 @开头定义变量名
@body-background-color: #e6e6e6;
@font-size: 12px;
@font-color: #4a4a4a;
@font-color2: #9b9b9b;
@select-color: #EA5205;
@blue-color: #4990E2;
@border: 1px #c7c7c9 solid;
@margin: 0 auto;
//引用变量
.item {
    width: 100%;
    background-color: @body-background-color;
    position: relative;
    text-align: center;
    color: @font-color;
    margin: @margin;
    margin-bottom: 10px;
    border-bottom: @border;
    padding: 10px 0px;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//2. 混合（Mixin） .开头定义变量名
//设置基本的css
.base {
    width: 100%;
    background-color: @body-background-color;
    position: relative;
    text-align: center;
    color: @font-color;
    margin: 0 auto;
}

//设置圆角
.rounded-corners (@radius: 5px) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    -ms-border-radius: @radius;
    -o-border-radius: @radius;
    border-radius: @radius;
}

//设置用户头像
.user_avator_public(@user-avator-width_and_height: 40px) {
    width: @user-avator-width_and_height;
    height: @user-avator-width_and_height;
    border: 1px #e6e6e6 solid;
    .rounded-corners(50%);
}

html,
body {
    .base; //混合的使用
    //.rounded-corners(); //默认是5px ;如果传递参数，则按照参数设置
    .rounded-corners(3px); //默认是5px ;如果传递参数，则按照参数设置
    text-align: left;
}

//混合的引用
.userAcator {
    //.user_avator_public(); //使用默认的参数
    .user_avator_public(50px); //使用自己设置的参数
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//3.嵌套
.items {
    width: 100%;
    position: relative;
    margin: @margin;
    ul {
        list-style-type: none;
    }
    li {
        float: left;
        margin: 0 auto;
        padding: 0px;
        height: 40px;
        line-height: 40px;
        text-align: center;
        width: 100%;
    }
    a {
        display: block;
        .name {
            color: #4a4a4a;
            float: left;
            &:hover {
                background-color: firebrick;
            }
        }
        img {
            float: left;
            .user_avator_public(50px);
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//4.匹配模式（使用css写三角为例子）: 类似于定义构造函数 js中的if..else..
//三角向上
.triangle(top, @border-width: 30px, @border-color: yellow) {
    width: 0px;
    height: 0px;
    overflow: hidden;
    border-width: @border-width;
    border-color: transparent transparent @border-color transparent;
    border-style: dashed dashed solid dashed;
}

//三角向下
.triangle(bottom, @border-width: 30px, @border-color: yellow) {
    width: 0px;
    height: 0px;
    overflow: hidden;
    border-width: @border-width;
    border-color: @border-color transparent transparent transparent;
    border-style: solid dashed dashed dashed;
}

//三角向左
.triangle(left, @border-width: 30px, @border-color: yellow) {
    width: 0px;
    height: 0px;
    overflow: hidden;
    border-width: @border-width;
    border-color: transparent @border-color transparent transparent;
    border-style: dashed solid dashed dashed;
}

//三角向右
.triangle(right, @border-width: 30px, @border-color: yellow) {
    width: 0px;
    height: 0px;
    overflow: hidden;
    border-width: @border-width;
    border-color: transparent transparent transparent @border-color;
    border-style: dashed dashed dashed solid;
}

//@_表示不管上面的函数 匹配模式你调用哪一个，都会执行这个里面的代码 :注意：@_后面的参数不可以去掉
.triangle(@_, @border-width: 30px, @border-color: yellow) {
    width: 0px;
    height: 0px;
    overflow: hidden;
    float: left;
    margin-bottom: 40px;
    margin-right: 20px;
}

/////引用上面的设置
.sanjiao_top {
    .triangle(top);
}

.sanjiao_bottom {
    .triangle(bottom);
}

.sanjiao_left {
    .triangle(left, 20px, red);
}

.sanjiao_right {
    .triangle(right);
}

//匹配模式之定位的例子
.position(a) {
    position: absolute;
}

.position(f) {
    position: fixed;
}

.position(r) {
    position: relative;
}

//使用匹配模式
.post {
    .position(r);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//5.运算:任何数字、颜色或者变量都可以参与运算,颜色的运算一般不建议使用
@width: 100px;
.suan {
    width: (@width+20)*2;
    height: 300px;
    background-color: fuchsia;
    margin: @margin;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//6.@arguments变量:包含了所有传递进来的参数（使用不多）
.border(@border-width: 3px, @border-color: red, @border-style: solid) {
    border: @arguments; //可以包含所有的参数，不用一个一个的赋值了
}

.ment {
    .border();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//7.避免编译：有的时候需要输出一些不正确的css语法或是使用一些Less不认识的专有语法，这个时候需要在字符串的前面加  ~
.bianyi {
    width: calc(300px-200px);
    height: 200px;
    background-color: fuchsia;
}

.bianyi2 {
    width: ~'calc(300px-200px)';
    height: 200px;
    background-color: fuchsia;
    margin-top: 30px;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//7. !important 会为混合中的所有样式，都添加！important
.borderStyle(@color: red) {
    border: 5px solid @color;
    background-color: yellow;
}

.important {
    .borderStyle() !important;
}